<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miujike.worksservice.mapper.VideoMapper">

    <resultMap id="BaseResultMap" type="com.miujike.worksservice.mapper.VideoMapper">
        <id column="video_id" property="videoId"/>
        <result column="user_id" property="userId"/>
        <result column="singer" property="singer"/>
        <result column="title" property="title"/>
        <result column="detail" property="detail"/>
        <result column="video_url" property="videoUrl"/>
        <result column="cover" property="cover"/>
        <result column="duration" property="duration"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="release_time" property="releaseTime"/>
        <result column="eggs" property="eggs"/>
        <result column="thumbs" property="thumbs"/>
        <result column="comments" property="comments"/>
        <result column="original_singer" property="originalSinger"/>
        <result column="play_times" property="playTimes"/>
        <result column="shares" property="shares"/>
    </resultMap>
    <sql id="Base_Column_List">
        video_id as videoId,user_id as userId,singer,title,detail,
        video_url as videoUrl,duration,status,create_time as createTime,
        release_time as releaseTime,eggs,thumbs,comments,original_singer as originalSinger,
        play_times as playTimes,shares
    </sql>
    <select id="getVideoInfo" parameterType="long" resultType="map">
        select video_id as videoId,video_url as videoUrl,singer ,user_id as userId,
        original_singer as originalSinger,play_times as playTimes,cover,
        title,duration,shares
        from miu_video
        where video_id = #{videoId}
    </select>
    <select id="getUserVideoList" parameterType="map" resultType="map">
        select video_id as videoId,video_url as videoUrl,singer ,user_id as userId,
        original_singer as originalSinger,play_times as playTimes,cover,
        title,duration,shares
        from miu_video
        <if test='userId != 0'>
            where user_id = #{userId}
        </if>
        <if test='lastId != 0'>
            <![CDATA[
                and video_id < #{lastId}
            ]]>
        </if>
        order by video_id desc
        limit #{fetchNum}
    </select>

    <select id="getNewVideoList" resultType="map">
        select video_id as videoId,video_url as videoUrl,singer ,user_id as userId,
        original_singer as originalSinger,play_times as playTimes,cover,
        title,duration,shares
        from miu_video
        order by release_time desc
        limit 5
    </select>
    <select id="getVideoListByKey" parameterType="java.lang.String" resultType="map">
        select video_id as videoId,video_url as videoUrl,singer ,user_id as userId,
        original_singer as originalSinger,play_times as playTimes,cover,
        title,duration
        from miu_video
        where nickname like #{param} or title like #{param}
        or original_singer like #{param}
        or detail like #{param}
    </select>

    <!--随机最多五条数据，作为推荐-->
    <select id="getRecommendVideoList" parameterType="map" resultType="map">
        select video_id as videoId,video_url as videoUrl,singer ,user_id as userId,
        original_singer as originalSinger,play_times as playTimes,cover,
        title,duration
        from miu_video
        where video_id >= ((select MAX(video_id) from miu_video)-(select MIN(video_id) from miu_video)) * RAND() + (select MIN(video_id) from miu_video)
        and video_id != #{curVideoId}
        limit #{n};
    </select>
    <!--获取喜欢的视频-->
    <select id="getUserVideoListLike" parameterType="map" resultType="map">
        select distinct mt.target_id as videoId,mv.video_url as videoUrl,mv.singer ,mv.user_id as userId,
        mv.original_singer as originalSinger,mv.play_times as playTimes,mv.cover,mv.title,mv.duration,mt.thumb_id as thumbId
        from miu_video mv right join miu_thumb mt on mt.target_id = mv.video_id
        where mt.target_type = 2
        and mt.from_user_id = #{userId}
        <if test='lastId != 0'>
            <![CDATA[
                and mt.thumb_id < #{lastId}
            ]]>
        </if>
        order by mt.thumb_id desc
        limit #{fetchNum}
    </select>
</mapper>